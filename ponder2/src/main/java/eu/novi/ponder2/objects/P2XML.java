/**
 * Copyright 2007 Kevin Twidle, Imperial College, London, England.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA
 *
 * Contact: Kevin Twidle <kpt@doc.ic.ac.uk>
 *
 * Created on Mar 21, 2007
 *
 * $Log:$
 */

package eu.novi.ponder2.objects;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Map;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import eu.novi.ponder2.objects.P2Array;
import eu.novi.ponder2.objects.P2Object;
import eu.novi.ponder2.objects.P2XML;


import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.twicom.qdparser.TaggedElement;
import com.twicom.qdparser.XMLReader;

import eu.novi.ponder2.ManagedObject;
import eu.novi.ponder2.apt.Ponder2op;
import eu.novi.ponder2.comms.P2Serializable;
import eu.novi.ponder2.exception.Ponder2ArgumentException;
import eu.novi.ponder2.exception.Ponder2OperationException;

/**
 * This is an internal Ponder2 XML object type. It represents an XML structure
 * which can be operated upon with XPath commands
 * 
 * @author Kevin Twidle
 * @version $Id:$
 */
public class P2XML extends P2Object implements ManagedObject {

	private Node node;
	private TaggedElement qdpxml = null;
	XPath xpath = XPathFactory.newInstance().newXPath();

	/**
	 * constructor for Ponder2 serialisation
	 */
	protected P2XML() {
	}

	P2XML(TaggedElement xml) throws Ponder2ArgumentException {
		this(xml.toString());
		qdpxml = xml;
	}

	P2XML(String aString) throws Ponder2ArgumentException {
		readString(aString);
	}

	/**
	 * Turns a string into an XML Node
	 * 
	 * @param aString
	 *            the string containing XML
	 * @throws Ponder2ArgumentException
	 *             if there is a conversion error
	 */
	private void readString(String aString) throws Ponder2ArgumentException {
		DocumentBuilder builder;
		try {
			builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
			node = builder.parse(new ByteArrayInputStream(aString.getBytes()));
		} catch (ParserConfigurationException e) {
			throw new Ponder2ArgumentException("XML configuration error: "
					+ e.getMessage());
		} catch (SAXException e) {
			throw new Ponder2ArgumentException("XML SAX error: "
					+ e.getMessage());
		} catch (IOException e) {
			throw new Ponder2ArgumentException("XML IO error: "
					+ e.getMessage());
		}
	}

	P2XML(Node node) {
		this.node = node;
	}

	/**
	 * Answers an array with XML elements generated by applying
	 * anXPathExpression to the receiver
	 * 
	 * @param anXPathExpression
	 *            the XPath expression to be executed
	 * @return an array with the XPath results
	 * @throws Ponder2OperationException
	 */
	@Ponder2op("xpathNodeSet:")
	public P2Array xPathNodeSet(String anXPathExpression)
			throws Ponder2OperationException {
		try {
			NodeList nodeList = (NodeList) xpath.evaluate(anXPathExpression,
					node, XPathConstants.NODESET);
			int length = nodeList.getLength();
			P2XML array[] = new P2XML[length];
			for (int i = 0; i < length; i++) {
				Node node = nodeList.item(i);
				array[i] = new P2XML(node);
			}
			return new P2Array(array);
		} catch (XPathExpressionException e) {
			String msg = e.getMessage();
			if (msg == null)
				return new P2Array();
			throw new Ponder2OperationException("XPath NodeSet failed - " + msg);
		}
	}

	/**
	 * Answers an XML element generated by applying anXPathExpression to the
	 * receiver
	 * 
	 * @param anXPathExpression
	 *            the XPath expression to be executed
	 * @return the result of the XPath expression
	 * @throws Ponder2OperationException
	 */
	@Ponder2op("xpathNode:")
	public P2XML xPathNode(String anXPathExpression)
			throws Ponder2OperationException {
		try {
			return new P2XML((Node) xpath.evaluate(anXPathExpression, node,
					XPathConstants.NODE));
		} catch (XPathExpressionException e) {
			throw new Ponder2OperationException("XPath Node failed - "
					+ e.getMessage());
		}
	}

	/**
	 * Answers a string generated by applying anXPathExpression to the receiver
	 * 
	 * @param anXPathExpression
	 *            the XPath expression to be executed
	 * @return the result string of the XPath expression
	 * @throws Ponder2OperationException
	 */
	@Ponder2op("xpathString:")
	public String xPathString(String anXPathExpression)
			throws Ponder2OperationException {
		try {
			return (String) xpath.evaluate(anXPathExpression, node,
					XPathConstants.STRING);
		} catch (XPathExpressionException e) {
			throw new Ponder2OperationException("XPath String failed - "
					+ e.getMessage());
		}
	}

	/**
	 * Answers a boolean generated by applying anXPathExpression to the receiver
	 * 
	 * @param anXPathExpression
	 *            the XPath expression to be executed
	 * @return the result boolean of the XPath expression
	 * @throws Ponder2OperationException
	 */
	@Ponder2op("xpathBoolean:")
	public boolean xPathBoolean(String anXPathExpression)
			throws Ponder2OperationException {
		try {
			return (Boolean) xpath.evaluate(anXPathExpression, node,
					XPathConstants.BOOLEAN);
		} catch (XPathExpressionException e) {
			throw new Ponder2OperationException("XPath Boolean failed - "
					+ e.getMessage());
		}
	}

	/**
	 * Answers a number generated by applying anXPathExpression to the receiver
	 * 
	 * @param anXPathExpression
	 *            the XPath expression to be executed
	 * @return the result number of the XPath expression
	 * @throws Ponder2OperationException
	 */
	@Ponder2op("xpathNumber:")
	public int xPathNumber(String anXPathExpression)
			throws Ponder2OperationException {
		try {
			Double d = (Double) xpath.evaluate(anXPathExpression, node,
					XPathConstants.NUMBER);
			return d.intValue();
		} catch (XPathExpressionException e) {
			throw new Ponder2OperationException("XPath Number failed - "
					+ e.getMessage());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.novi.ponder2.objects.P2Object#asString()
	 */
	@Override
	@Ponder2op("asString")
	public String asString() throws Ponder2OperationException {
		try {
			DOMSource domSource = new DOMSource(node);
			StringWriter writer = new StringWriter();
			StreamResult result = new StreamResult(writer);
			TransformerFactory tf = TransformerFactory.newInstance();
			Transformer transformer = tf.newTransformer();
			transformer.transform(domSource, result);
			return writer.toString();
		} catch (TransformerException e) {
			throw new Ponder2OperationException(
					"XML failed to convert to XML string: " + e.getMessage());
		}
	}

	/**
	 * Returns itself, used for compatibility with other types
	 * 
	 * @return itself
	 */
	@Ponder2op("asXML")
	public P2Object asXML() {
		return this;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.novi.ponder2.objects.P2Object#writeXml()
	 */
	@Override
	public TaggedElement writeXml(Set<P2Object> written)
			throws Ponder2OperationException {
		TaggedElement xml = super.writeXml(written);
		if (qdpxml == null) {
			String xmlString = toString();
			qdpxml = XMLReader.parse(xmlString);
		}
		xml.add(qdpxml);
		return xml;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * eu.novi.ponder2.objects.P2Object#readXml(com.twicom.qdparser.TaggedElement
	 * )
	 */
	@Override
	public P2Object readXml(TaggedElement xml, Map<Integer, P2Serializable> read)
			throws Ponder2OperationException, Ponder2ArgumentException {
		readString(xml.getChild(0).toString());
		return this;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		try {
			return asString();
		} catch (Ponder2OperationException e) {
			return "<Bad XML/>";
		}
	}

}
