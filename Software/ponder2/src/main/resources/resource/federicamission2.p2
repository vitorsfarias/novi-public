// This is run in the Federica side
root print: "Setting up the FEDERICA".

/////////////////////////////////////////////////////////
/////The simple Events and Actions without Missions//////
/////////////////////////////////////////////////////////

// Event types we are going to use
event := root/factory/event create: #("topo").
event2 := root/factory/event create: #("vnode" "topo").
root/event at: "createRemoteVNode" put:event2.
root/event at: "createRemoteTopology" put: event.

event10 := root/factory/event create: #("vnode" "topo").
root/event at: "removeRemoteVNode" put: event10.
event11 := root/factory/event create: #("topo").
root/event at: "removeRemoteTopology" put: event11.

///////////////////////////////////////////////////////////


// Create the PlanetLab Interface
root print: "Interface Setup".

myinterface := root/factory/interface create.
myinterface providesEvent: "createRemoteTopology".
myinterface acceptsEvent: "createRemoteTopology".

myinterface providesEvent: "createRemoteVNode".
myinterface acceptsEvent: "createRemoteVNode".

myinterface providesEvent: "removeRemoteVNode".
myinterface acceptsEvent: "removeRemoteVNode".

myinterface providesEvent: "removeRemoteTopology".
myinterface acceptsEvent: "removeRemoteTopology".

myinterface providesEvent: "getquota".
myinterface acceptsEvent: "getquota".

myinterface providesEvent: "addToNumberOfRemoteVNodesIgot".
myinterface acceptsEvent: "addToNumberOfRemoteVNodesIgot".

myinterface providesEvent: "addToNumberOfRemoteVNodesIprovide".
myinterface acceptsEvent: "addToNumberOfRemoteVNodesIprovide".

myinterface providesEvent: "createTopology".
myinterface acceptsEvent: "createTopology".

myinterface providesEvent: "createVNode".
myinterface acceptsEvent: "createVNode".

// Mission setup
root print: "Mission Setup".

// Empty mission
mission := root/factory/mission create.

mission interface: "PlanetLabInterface";
		interface: "FedericaInterface";
		
policy: "p1" is: [ :policy :FedericaInterface :PlanetLabInterface |
	policy
		event: FedericaInterface/event/createRemoteTopology;
		action: [:topo|
	          root print: "-----> Got the create event (newRemoteTopology)".
					PlanetLabInterface raise:"createTopology" with:#(topo).
		]
		];
policy: "p2" is: [ :policy :FedericaInterface :PlanetLabInterface |
	policy
		event: FedericaInterface/event/createRemoteVNode;
		action: [:vnode :topo|
	          root print: "-----> Got the create event (newRemoteVNode)".
				   PlanetLabInterface raise:"createVNode" with:#(vnode topo).
				   PlanetLabInterface raise:"addToNumberOfRemoteVNodesIprovide".
				   FedericaInterface raise:"addToNumberOfRemoteVNodesIgot".
		]
		];
policy: "p10" is: [ :policy :FedericaInterface :PlanetLabInterface |
	policy
		event: FedericaInterface/event/removeRemoteVNode;
		action: [:vnode :topo|
	          root print: "-----> Got the remove event (removeRemoteVNode)".
				   PlanetLabInterface raise:"removeVNode" with:#(vnode topo).
		]
		];
policy: "p11" is: [ :policy :FedericaInterface :PlanetLabInterface |
	policy
		event: PlanetLabInterface/event/removeRemoteTopology;
		action: [:topo|
	          root print: "-----> Got the remove event (removeRemoteTopology)".
				   PlanetLabInterface raise:"removeTopology" with:#(topo).
		]
		];
//policy: "p3" is: [ :policy :FedericaInterface :PlanetLabInterface |
//	policy
//		event: FedericaInterface/event/returnNumberOfRemoteVNodes;
//		action: [
//			root print: "-----> Got the create event (returnNumberOfRemoteVNodes)".
//				   PlanetLabInterface raise:"returnNumberOfRemoteVNodes".
//		]
//		];
		onStart: [
		root print: "MISSION ON AIR".
			].



//root/mission at: "Mission1" put: mission.
	
root print: "Running Mission".

//interfaces := #("FedericaInterface" myinterface "PlanetLabInterface" myinterface) asHash.
//missionName := myinterface/missioncontroller load: mission with: interfaces.
//root print: "Mission is named " + missionName.



// Create the role for a remote !!!nurse!!!! (PlanetLabUser). Interface is what we show, mission is what we load into other side
root/mission/createrole value: "PlanetLabUser" value: myinterface value: mission.
root print: "Federica assigning interfaces".
root/mission/createassignedpolicy value: "PlanetLabUser" value: "FedericaInterface" value: "PlanetLabInterface".




//federicaremote:= root import: "root/command" from: "rmi://83.212.96.153/FEDlisten".
//theinterface := (root import: \"root/role/FedericaUser/interface\" from: \"rmi://147.102.13.74/PLlisten\".) 
//federicaremote execute: "
//	root/event/newsmc create: #(\"Federica\" (root import: \"root/role/FedericaUser/interface\" from: \"rmi://176.92.26.81/PLlisten\") ).
//".

// Set up ponderTalk interpreter
//root at: "command" put: ((root load: "PonderTalk") create:"PLlisten").

//=====================================================
// For testing

// Set up a policy to check the event that the mission produces
//rxpolicy := root/factory/ecapolicy create.
//rxpolicy
//	event: root/event/createPlanetLabSlice;
//	action: [ root print: "=====> Creation of the PL_SLICE" ];
//	active: true.
root print: "LOADED".
